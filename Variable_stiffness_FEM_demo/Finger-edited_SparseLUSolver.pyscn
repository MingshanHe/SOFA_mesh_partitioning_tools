# -*- coding: utf-8 -*-

import Sofa

import os
path = os.path.dirname(os.path.abspath(__file__))+'/mesh/'

def createScene(rootNode):
                rootNode.createObject('RequiredPlugin', name='SofaPythonPlugIn', pluginName='SofaPython')
                #rootNode.createObject('RequiredPlugin', name='SofaSparseSolverPlugIn', pluginName='SofaSparseSolver')
                #rootNode.createObject('RequiredPlugin', name='SoftRobotsPlugIn', pluginName='SoftRobots')
                rootNode.createObject('VisualStyle', displayFlags='showVisualModels hideBehaviorModels showCollisionModels hideBoundingCollisionModels showForceFields showInteractionForceFields hideWireframe')

                rootNode.createObject('FreeMotionAnimationLoop')

                # Add a QPInverseProblemSolver to the scene if you need to solve inverse problem like the one that involved
                # when manipulating the robots by specifying their effector's position instead of by direct control
                # of the actuator's parameters.
                #rootNode.createObject('QPInverseProblemSolver', printLog='1')
                # Otherwise use a GenericConstraintSolver
                rootNode.createObject('GenericConstraintSolver', tolerance="1e-5", maxIterations="100")

                rootNode.createObject('BackgroundSetting', color='0 0.168627 0.211765')
                rootNode.createObject('OglSceneFrame', style="Arrows", alignment="TopRight")

                ##########################################
                # FEM Model                              #
                ##########################################
                finger = rootNode.createChild('finger')
                finger.createObject('EulerImplicit', name='odesolver', firstOrder='1')
                finger.createObject('SparseLUSolver', name='preconditioner')#SparseLDLSolver

		        # Add a componant to load a VTK tetrahedral mesh and expose the resulting topology in the scene .
                finger.createObject('MeshVTKLoader', name='loader', filename=path+'finger.vtk')
                finger.createObject('TetrahedronSetTopologyContainer', src='@loader', name='container')
                finger.createObject('TetrahedronSetTopologyModifier')
                finger.createObject('TetrahedronSetTopologyAlgorithms', template='Vec3d')
                finger.createObject('TetrahedronSetGeometryAlgorithms', template='Vec3d')

                # Create a mechanical object component to store the DoFs of the model
                finger.createObject('MechanicalObject', name='tetras', template='Vec3d', showIndices='false', showIndicesScale='4e-5', rx='0', dz='0')

                # Gives a mass to the model
                finger.createObject('UniformMass', totalMass='0.5')

                # Add a TetrahedronFEMForceField component which implement an elastic material model solved using the Finite Element Method on
                # tetrahedrons.
                finger.createObject('TetrahedronFEMForceField', template='Vec3d', name='FEM', method='large', poissonRatio='0.3',  youngModulus='18000')

                # To facilitate the selection of DoFs, SOFA has a concept called ROI (Region of Interest).
		        # The idea is that ROI component "select" all DoFS that are enclosed by their "region".
                # We use ROI here to select a group of finger's DoFs that will be constrained to stay
                # at a fixed position.
                # You can either use "BoxROI"...
                finger.createObject('BoxROI', name='ROI1', box='-15 0 0 5 10 15', drawBoxes='true')
                # Or "SphereROI"...
                #finger.createObject('SphereROI', name='ROI', centers='0 0 0', radii='5')

                # RestShapeSpringsForceField is one way in Sofa to implement fixed point constraint.
                # Here the constraints are applied to the DoFs selected by the previously defined BoxROI
                finger.createObject('RestShapeSpringsForceField', points='@ROI1.indices', stiffness='1e12')

                # It is also possible to simply set by hand the indices of the points you want to fix.
                #finger.createObject('RestShapeSpringsForceField', points='0 1 2 11 55', stiffness='1e12')

                finger.createObject('LinearSolverConstraintCorrection')
                
                finger.createObject('PythonScriptController', filename="controller/FingerControllerVisitorTest.py", classname="FEMcontroller")#, printLog="true"


                ##########################################
                # Cable                                  #
                ##########################################

                #  This create a new node in the scene. This node is appended to the finger's node.
                sma = finger.createChild('SMA_WireActuator')
                sma.createObject('MechanicalObject', position=(
                                "-17.5 12.5 2.5 " +
                                "-32.5 12.5 2.5 " +
                                "-47.5 12.5 2.5 " +
                                "-62.5 12.5 2.5 " +
                                "-77.5 12.5 2.5 " +

                                "-83.5 12.5 4.5 " +
                                "-85.5 12.5 6.5 " +
                                "-85.5 12.5 8.5 " +
                                "-83.5 12.5 10.5 " +

                                "-77.5 12.5 12.5 " +
                                "-62.5 12.5 12.5 " +
                                "-47.5 12.5 12.5 " +
                                "-32.5 12.5 12.5 " +
                                "-17.5 12.5 12.5 " ))
                sma.createObject('BarycentricMapping')
                sma.createObject('StiffSpringForceField', stiffness="5000", template="Vec3d", name="actuator_wire", spring="0 1 5000 5 3.5 "+
                        "1 2 5000 5 15 "+ 
                        "2 3 5000 5 15 "+
                        "3 4 5000 5 15 "+
                        "4 5 5000 5 15 "+
                        "5 6 5000 5 15 "+
                        "6 7 5000 5 15 "+
                        "7 8 5000 5 15 "+
                        "8 9 5000 5 15 "+
                        "9 10 5000 5 15 "+
                        "10 11 5000 5 15 "+
                        "11 12 5000 5 15 "+
                        "12 13 5000 5 15 " )
                sma.createObject('PythonScriptController', filename="controller/FingerControllerVisitorTest.py", classname="SMA_wireController")

                ##########################################
                # Visualization                          #
                ##########################################
                # In Sofa, visualization is handled by adding a rendering model.
                # Create an empty child node to store this rendering model.
                fingerVisu = finger.createChild('visu')

                # Add to this empty node a rendering model made of triangles and loaded from an stl file.
                fingerVisu.createObject('OglModel', filename=path+"finger.stl", template='ExtVec3f', color="0.0 0.7 0.7")

                # Add a BarycentricMapping to deform the rendering model in a way that follow the ones of the parent mechanical model.
                fingerVisu.createObject('BarycentricMapping')

                return rootNode
